<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - MVCClient</title>

    <partial name="_Styles" />
    <link href="~/lib/toastr/toastr.css" rel="stylesheet" />
</head>
<body class="pt-0">
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark mb-2">
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item" active-url="home">
                    <a class="nav-link" asp-action="Index" asp-controller="Home">@Localizer["Home"]<span class="sr-only">(current)</span></a>
                </li>
                <li class="nav-item" active-url="Home/About" >
                    <a class="nav-link" asp-controller="Home" asp-action="About">@Localizer["About"]</a>
                </li>

            </ul>
            @await Html.PartialAsync("_SelectLanguagePartial")
            <a class="btn btn-outline-light" asp-action="Logout" asp-controller="Account">@Localizer["Logout"]</a>
        </div>
    </nav>

    <partial name="_CookieConsentPartial" />

    <div class="container body-content">

        @RenderBody()
        <hr />
        <footer>
            <p>&copy; 2019 - MVCClient</p>
        </footer>
    </div>

    <partial name="_Scripts" />

    @RenderSection("Scripts", required: false)
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script src="~/lib/toastr/toastr.min.js"></script>

    <script type="text/javascript">

        if ('@User.Identity.IsAuthenticated' === 'True') {

            stablishConnection();
        }

        function stablishConnection() {
            let connection = new signalR.HubConnectionBuilder()
                .withUrl('@settings.Value.SignalrHubUrl/notificationshub', {
                    transport: signalR.HttpTransportType.LongPolling,
                    accessTokenFactory: function() {
                        return "Authorization", getToken();
                    }
                })
                .configureLogging(signalR.LogLevel.Information)
                .build();

            connection.start()
                .then(function () {
                    console.log('User Registered to Signalr Hub');
                    registerNotificationHandlers(connection);
                })
                .catch(function (err) {
                    return console.error(err.toString());
                });
        }

        function registerNotificationHandlers(connection) {

            //connection.on("DataUpdated", function(data){
            //    toastr.success("Data with id: " + data.dataId + " was changed to: " + data.data);
            //});

            connection.on("Test", function(data){
                toastr.success("Data with id: " + data.dataId + " was changed to: " + data.data +" and username is: " + data.username);
            });

        }

        function getToken() {
            return '@Context.GetTokenAsync("access_token").Result';
        }

    </script>
</body>
</html>
